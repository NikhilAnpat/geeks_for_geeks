// Given an array of numbers form 0 to 9 of size N. Your task is to rearrange elements of the array such that after combining all the elements of the array number formed is maximum.

 

// Example 1:

// Input:
// N = 5
// A[] = {9, 0, 1, 3, 0}
// Output:
// 93100
// Explanation:
// Largest number is 93100 which
// can be formed from array digits.
 

// Example 2:

// Input:
// N = 3
// A[] = {1, 2, 3}
// Output:
// 321
 

// Your Task:  
// You don't need to read input or print anything. Your task is to complete the function MaxNumber() which takes the array A[] and its size N as inputs and returns a single line a string denoting the largest number that can be achieved by rearranging the elements of the array.


// Expected Time Complexity: O(N)
// Expected Auxiliary Space: O(N)






//User function Template for Java

class Solution
{
    
    public String MaxNumber(long arr[], long n)
    {
        //code here.
        
        
        Arrays.sort(arr);
       StringBuilder sb = new StringBuilder();
       for(int i = 0;i<n;i++){
           sb.append(arr[i]);
       }
       return sb.reverse().toString();
        
        
        
        
        
        //// time limit exceed
        
    //     Arrays.sort(arr);
    //   String a1="";
      
    //   for(long a: arr)
    //   {
    //       a1+=a;
    //   }
    //     StringBuilder sb = new StringBuilder(a1);
    //     sb.reverse();
    //     a1 = sb.toString();

    //         return a1;
      
      
      
      
      
      
      
      
      
      
        // Time limit exceed
        
        
        // String a1="";
        
        // Arrays.sort(arr);
        // for(int i=arr.length-1;i>=0;i--)
        // {
        //     a1+=arr[i];
        // }
        
        // return a1;
    }
}
