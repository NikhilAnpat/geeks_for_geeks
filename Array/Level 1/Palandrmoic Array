
/*Complete the Function below*/

// Given a Integer array A[] of n elements. Your task is to complete the function PalinArray. Which will return 1 if all the elements of the Array are palindrome otherwise it will return 0.

// Example 1:

// Input:
// 5
// 111 222 333 444 555

// Output:
// 1

// Explanation:
// A[0] = 111 //which is a palindrome number.
// A[1] = 222 //which is a palindrome number.
// A[2] = 333 //which is a palindrome number.
// A[3] = 444 //which is a palindrome number.
// A[4] = 555 //which is a palindrome number.
// As all numbers are palindrome so This will return 1.
// Example 2:

// Input:
// 3
// 121 131 20
 
// Output:
// 0

// Explanation:
// 20 is not a palindrome hence the output is 0.

// Constraints:
// 1 <=T<= 50
// 1 <=n<= 20
// 1 <=A[]<= 10000


/*Complete the Function below*/
class GfG
{
	public static int palinArray(int[] a, int n) 
	
	{
	   // add code here.
	   // for (int i = 0; i < n; i++) 
	   // {
    //         String s = String.valueOf(a[i]);
    //         for (int j = 0; j < s.length()/2; j++) 
    //         {
    //             if (s.charAt(j) != s.charAt(s.length() - j - 1))
    //                 return 0;
    //         }
    //     }
    //     return 1;
    
        
        // for(int i=0;i<n;i++)
        // {
        //     int arr=a[i];
        //     int temp=0;
        //     int rev=0;
            
        //     while(temp !=0)
        //     {
        //         int b=temp%10;
        //         rev=rev*10+b;
        //         temp=temp/10;
        //     }
            
        //     if(rev==arr)
        //     {
        //         return 1;
        //     }
        // }
        // return 0;
        
        
        
        
        
        
        //final solution >>>>>>>>>>
        
         int counter=0;
                for(int i=0;i<n;i++)
                {
                    //int counter=0;
                    int temp=a[i];
                    int r=0;
                    int rev=0;
                    while(a[i]>0)
                    {
                        r=a[i]%10;
                        rev=rev*10+r;
                        a[i]=a[i]/10;
                    }
                    if(temp==rev)
                        counter+=1;
                }
                //System.out.println(counter);
                if(counter==n)
                    return 1;
                else
                    return 0;
	}
}
