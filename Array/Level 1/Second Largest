// Given an array Arr of size N, print second largest distinct element from an array.

// Example 1:

// Input: 
// N = 6
// Arr[] = {12, 35, 1, 10, 34, 1}
// Output: 34
// Explanation: The largest element of the 
// array is 35 and the second largest element
// is 34.
// Example 2:

// Input: 
// N = 3
// Arr[] = {10, 5, 10}
// Output: 5
// Explanation: The largest element of 
// the array is 10 and the second 
// largest element is 5.
// Your Task:
// You don't need to read input or print anything. Your task is to complete the function print2largest() which takes the array of integers arr and n as parameters and returns an integer denoting the answer. If 2nd largest element doesn't exist then return -1.

// Expected Time Complexity: O(N)
// Expected Auxiliary Space: O(1)

 


//User function Template for Java

class Solution {
    int print2largest(int arr[], int n) {
       
       
       //Solution 1
       
       
       
        int max=-1,secMax=-1,i=0;
        while(i<n){
            if(arr[i]>max){
                secMax=max;
                max=arr[i];
            } 
            else{
                if(arr[i]>secMax && arr[i]!=max) secMax=arr[i];
            }
            i++;
        }
        return secMax;
        
      //Solution 2  
        
    //       Arrays.sort(arr);
    //     int a = -1;
    //     for(int i=n-2;i>=0;i--)
    //          {
    //         if(arr[n-1]!=arr[i])
    //            {
    //           a = arr[i];
    //           break;
    //         }
    //     }
    //     return a;
    
     }
}
