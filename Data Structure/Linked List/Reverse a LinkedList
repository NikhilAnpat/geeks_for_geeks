// Given a linked list of N nodes. The task is to reverse this list.

// Example 1:

// Input:
// LinkedList: 1->2->3->4->5->6
// Output: 6 5 4 3 2 1
// Explanation: After reversing the list, 
// elements are 6->5->4->3->2->1.
// Example 2:

// Input:
// LinkedList: 2->7->8->9->10
// Output: 10 9 8 7 2
// Explanation: After reversing the list,
// elements are 10->9->8->7->2.
// Your Task:
// The task is to complete the function reverseList() with head reference as the only argument and should return new head after reversing the list.

// Expected Time Complexity: O(N).
// Expected Auxiliary Space: O(1).
//function Template for Java

/* linked list node class:

class Node {
    int data;
    Node next;
    Node(int value) {
        this.value = value;
    }
}

*/

class Solution
{
    //Function to reverse a linked list.
    Node reverseList(Node head)
    {
       
 
        
    //      Node prev= null;
    //   Node trav = head;
    //   Node temp = null;
    //   while(trav != null) {
    //       temp = trav.next;
    //       trav.next = prev;
    //       prev= trav;
    //       trav = temp;
    //   }
    //   return prev;
        
        
        ArrayList<Integer> arr=new ArrayList<Integer>();
        
        for(Node trav=head;trav !=null;trav=trav.next)
        {
            arr.add(trav.data);
        }
        
        for(Node trav=head;trav !=null;trav=trav.next)
        {
        trav.data=arr.remove(arr.size()-1);
        }
        
        return head;
        
    }
}
